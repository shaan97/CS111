Total: 1316 samples
     574  43.6%  43.6%      664  50.5% spin_lookup
     551  41.9%  85.5%      650  49.4% spin_insert
     141  10.7%  96.2%      141  10.7% __strcmp_sse42
      26   2.0%  98.2%       88   6.7% SortedList_lookup
      18   1.4%  99.5%       97   7.4% SortedList_insert
       4   0.3%  99.8%        4   0.3% hash
       2   0.2% 100.0%        2   0.2% generate_string
       0   0.0% 100.0%     1314  99.8% __clone
       0   0.0% 100.0%        2   0.2% __libc_start_main
       0   0.0% 100.0%        2   0.2% _start
       0   0.0% 100.0%      664  50.5% atomic_look_delete
       0   0.0% 100.0%     1314  99.8% create_and_delete
       0   0.0% 100.0%        2   0.2% main
       0   0.0% 100.0%     1314  99.8% start_thread
ROUTINE ====================== spin_insert in /u/cs/ugrad/shaan/Documents/CS111/Project2/Lab2B/lab2_list.c
   551    650 Total samples (flat / cumulative)
     .      .  120:     pthread_mutex_unlock(mutex + index);
     .      .  121:   return val;
     .      .  122: }
     .      .  123: 
     .      .  124: int* s_flag;
---
     .      .  125: void spin_insert(SortedList_t * list, SortedListElement_t * element, int i){
     .      2  126:   long long index = hash((unsigned char *)element->key) % numLists;
     .      .  127: 
     .      .  128:   struct timespec start, end, delta;
     .      .  129:   clock_gettime(CLOCK_REALTIME, &start);
   551    551  130:   while(__sync_lock_test_and_set(s_flag + index, 1))
     .      .  131:     ;
     .      .  132:   clock_gettime(CLOCK_REALTIME, &end);
     .      .  133:   clock_gettime(CLOCK_REALTIME, &delta);
     .      .  134:   lock_time[i] += diff(start, end, delta);
     .      .  135: 
     .     97  136:   SortedList_insert(list + index, element);
     .      .  137:   __sync_lock_release(s_flag + index);
     .      .  138: }
---
     .      .  139: 
     .      .  140: int spin_delete(SortedListElement_t * element, int lock_info, int i){
     .      .  141:   long long index = hash((unsigned char *)element->key) % numLists;
     .      .  142:   if(~lock_info & LOCK_OWNED){
     .      .  143:     struct timespec start, end, delta;
ROUTINE ====================== spin_insert in /u/cs/ugrad/shaan/Documents/CS111/Project2/Lab2B/lab2_list.c
   551    650 Total samples (flat / cumulative)
     .      .  120:     pthread_mutex_unlock(mutex + index);
     .      .  121:   return val;
     .      .  122: }
     .      .  123: 
     .      .  124: int* s_flag;
---
     .      .  125: void spin_insert(SortedList_t * list, SortedListElement_t * element, int i){
     .      2  126:   long long index = hash((unsigned char *)element->key) % numLists;
     .      .  127: 
     .      .  128:   struct timespec start, end, delta;
     .      .  129:   clock_gettime(CLOCK_REALTIME, &start);
   551    551  130:   while(__sync_lock_test_and_set(s_flag + index, 1))
     .      .  131:     ;
     .      .  132:   clock_gettime(CLOCK_REALTIME, &end);
     .      .  133:   clock_gettime(CLOCK_REALTIME, &delta);
     .      .  134:   lock_time[i] += diff(start, end, delta);
     .      .  135: 
     .     97  136:   SortedList_insert(list + index, element);
     .      .  137:   __sync_lock_release(s_flag + index);
     .      .  138: }
---
     .      .  139: 
     .      .  140: int spin_delete(SortedListElement_t * element, int lock_info, int i){
     .      .  141:   long long index = hash((unsigned char *)element->key) % numLists;
     .      .  142:   if(~lock_info & LOCK_OWNED){
     .      .  143:     struct timespec start, end, delta;
