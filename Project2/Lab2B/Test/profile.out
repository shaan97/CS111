Total: 1067 samples
     570  53.4%  53.4%      663  62.1% spin_insert
     317  29.7%  83.1%      398  37.3% spin_lookup
     128  12.0%  95.1%      128  12.0% __strcmp_sse42
      23   2.2%  97.3%       77   7.2% SortedList_lookup
      17   1.6%  98.9%       91   8.5% SortedList_insert
       5   0.5%  99.3%        5   0.5% hash
       2   0.2%  99.5%        2   0.2% spin_length
       1   0.1%  99.6%        1   0.1% 0x00007ffd503df802
       1   0.1%  99.7%        1   0.1% 0x00007ffd503df814
       1   0.1%  99.8%        1   0.1% 0x00007ffd503df85f
       1   0.1%  99.9%        1   0.1% __random
       1   0.1% 100.0%        2   0.2% generate_string
       0   0.0% 100.0%        3   0.3% __clock_gettime
       0   0.0% 100.0%     1065  99.8% __clone
       0   0.0% 100.0%        2   0.2% __libc_start_main
       0   0.0% 100.0%        2   0.2% _start
       0   0.0% 100.0%      400  37.5% atomic_look_delete
       0   0.0% 100.0%     1065  99.8% create_and_delete
       0   0.0% 100.0%        2   0.2% main
       0   0.0% 100.0%        1   0.1% rand
       0   0.0% 100.0%        2   0.2% spin_delete
       0   0.0% 100.0%     1065  99.8% start_thread
ROUTINE ====================== spin_insert in /u/cs/ugrad/shaan/Documents/CS111/Project2/Lab2B/Test/lab2_list.c
   570    663 Total samples (flat / cumulative)
     .      .  120:     pthread_mutex_unlock(mutex + index);
     .      .  121:   return val;
     .      .  122: }
     .      .  123: 
     .      .  124: int* s_flag;
---
     .      .  125: void spin_insert(SortedList_t * list, SortedListElement_t * element, int i){
     .      1  126:   long long index = hash((unsigned char *)element->key) % numLists;
     .      .  127: 
     .      .  128:   struct timespec start, end, delta;
     .      .  129:   clock_gettime(CLOCK_REALTIME, &start);
   570    570  130:   while(__sync_lock_test_and_set(s_flag + index, 1))
     .      .  131:     ;
     .      1  132:   clock_gettime(CLOCK_REALTIME, &end);
     .      .  133:   clock_gettime(CLOCK_REALTIME, &delta);
     .      .  134:   lock_time[i] += diff(start, end, delta);
     .      .  135: 
     .     91  136:   SortedList_insert(list + index, element);
     .      .  137:   __sync_lock_release(s_flag + index);
     .      .  138: }
---
     .      .  139: 
     .      .  140: int spin_delete(SortedListElement_t * element, int lock_info, int i){
     .      .  141:   long long index = hash((unsigned char *)element->key) % numLists;
     .      .  142:   if(~lock_info & LOCK_OWNED){
     .      .  143:     struct timespec start, end, delta;
ROUTINE ====================== spin_insert in /u/cs/ugrad/shaan/Documents/CS111/Project2/Lab2B/Test/lab2_list.c
   570    663 Total samples (flat / cumulative)
     .      .  120:     pthread_mutex_unlock(mutex + index);
     .      .  121:   return val;
     .      .  122: }
     .      .  123: 
     .      .  124: int* s_flag;
---
     .      .  125: void spin_insert(SortedList_t * list, SortedListElement_t * element, int i){
     .      1  126:   long long index = hash((unsigned char *)element->key) % numLists;
     .      .  127: 
     .      .  128:   struct timespec start, end, delta;
     .      .  129:   clock_gettime(CLOCK_REALTIME, &start);
   570    570  130:   while(__sync_lock_test_and_set(s_flag + index, 1))
     .      .  131:     ;
     .      1  132:   clock_gettime(CLOCK_REALTIME, &end);
     .      .  133:   clock_gettime(CLOCK_REALTIME, &delta);
     .      .  134:   lock_time[i] += diff(start, end, delta);
     .      .  135: 
     .     91  136:   SortedList_insert(list + index, element);
     .      .  137:   __sync_lock_release(s_flag + index);
     .      .  138: }
---
     .      .  139: 
     .      .  140: int spin_delete(SortedListElement_t * element, int lock_info, int i){
     .      .  141:   long long index = hash((unsigned char *)element->key) % numLists;
     .      .  142:   if(~lock_info & LOCK_OWNED){
     .      .  143:     struct timespec start, end, delta;
